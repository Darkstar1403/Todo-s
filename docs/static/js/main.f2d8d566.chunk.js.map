{"version":3,"sources":["components/08-useReducer/TodoAdd.js","hooks/useForm.js","components/08-useReducer/TodoListItem.js","components/08-useReducer/TodoList.js","components/08-useReducer/todoReducer.js","components/08-useReducer/TodoApp.js","index.js"],"names":["TodoAdd","handleAddTodo","initialState","useState","form","setForm","target","name","value","useForm","description","handleInputChange","reset","onSubmit","e","preventDefault","trim","length","newTodo","id","Date","getTime","desc","done","type","className","placeholder","autoComplete","onChange","TodoListItem","React","memo","todo","index","handleDelete","handleToggle","onClick","TodoList","todos","map","i","todoReducer","state","action","payload","filter","TodoApp","useReducer","JSON","parse","localStorage","getItem","dispatch","useEffect","setItem","stringify","useCallback","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2d8d566.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useForm } from '../../hooks/useForm';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const TodoAdd = ({handleAddTodo}) => {\r\n\r\n    const [{description}, handleInputChange, reset] = useForm({\r\n        description: ''\r\n    });\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if(description.trim().length <= 1){\r\n            return;\r\n        }\r\n\r\n        const newTodo ={\r\n            id: new Date().getTime(),\r\n            desc: description,\r\n            done: false\r\n        };\r\n        handleAddTodo(newTodo);\r\n        reset();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h4>Add ToDo</h4>\r\n            <hr/>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type='text'\r\n                    name='description'\r\n                    className='form-control'\r\n                    placeholder='Learn...'\r\n                    autoComplete='off'\r\n                    value={description}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <button\r\n                    type='submit'\r\n                    className='btn btn-outline-primary mt-1 w-100'\r\n                    >\r\n                    Add\r\n                </button>\r\n\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nTodoAdd.propTypes ={\r\n    handleAddTodo: PropTypes.func.isRequired\r\n}\r\n","import  {useState} from 'react'\r\n\r\nexport const useForm = (initialState={}) => {\r\n    \r\n    const [form, setForm] = useState(initialState)\r\n\r\n    const reset = () =>{\r\n        setForm(initialState);\r\n    }\r\n\r\n    const handleInputChange = ({target}) =>{\r\n        setForm({\r\n            ...form,\r\n            [target.name]: target.value\r\n        });\r\n    }\r\n    \r\n    return [form, handleInputChange, reset];\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nexport const TodoListItem = React.memo(({todo, index, handleDelete, handleToggle}) =>{\r\n    \r\n    return ( \r\n        <li\r\n            className='list-group-item' key={todo.id}\r\n        >\r\n            <p className={todo.done?'complete':''}\r\n                onClick={() => handleToggle(todo.id)} >{index+1}.{todo.desc}</p>\r\n            <button className='btn btn-danger' onClick={() => handleDelete(todo.id)}>Delete</button>\r\n        </li>\r\n    )\r\n})\r\n\r\nTodoListItem.propTypes ={\r\n    todo: PropTypes.object.isRequired,\r\n    index: PropTypes.number.isRequired,\r\n    handleDelete: PropTypes.func.isRequired,\r\n    handleToggle:PropTypes.func.isRequired\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { TodoListItem } from './TodoListItem';\r\n\r\nexport const TodoList = React.memo(({todos, handleDelete, handleToggle}) => {\r\n    return (\r\n        <ul className='list-group list-group-flush'>\r\n            {todos.map((todo, i) =>\r\n                <TodoListItem key={todo.id} todo={todo} index={i} handleDelete={handleDelete} handleToggle={handleToggle}/>\r\n                )\r\n            }\r\n        </ul>\r\n    )\r\n})\r\n\r\nTodoList.propTypes ={\r\n    todos: PropTypes.array.isRequired,\r\n    handleDelete: PropTypes.func.isRequired,\r\n    handleToggle: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const todoReducer = (state = [], action) =>{\r\n    switch(action?.type){\r\n        case 'add':\r\n            return [...state, action.payload];\r\n\r\n        case 'delete':\r\n            return state.filter( todo => todo.id !== action.payload);\r\n\r\n        case 'toggle':\r\n            // return state.map(todo =>{\r\n            //     if(todo.id === action.payload){\r\n            //         return{\r\n            //             ...todo,\r\n            //             done: !todo.done\r\n            //         }\r\n            //     }\r\n            //     else{\r\n            //         return todo;\r\n            //     }\r\n            // })\r\n\r\n            return state.map(todo => (todo.id === action.payload)?{...todo, done: !todo.done}:todo);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, {useReducer, useEffect, useCallback} from 'react';\r\nimport './styles.css';\r\nimport { TodoAdd } from './TodoAdd';\r\nimport { TodoList } from './TodoList';\r\nimport { todoReducer } from './todoReducer';\r\n\r\n\r\nexport const TodoApp = () => {\r\n\r\n    const init = () =>{\r\n\r\n        return JSON.parse(localStorage.getItem('todos')) || [];\r\n        // return [{\r\n        //     id: new Date().getTime(),\r\n        //     desc: 'Learn React',\r\n        //     done: false\r\n        // }];\r\n    }\r\n\r\n    const [todos, dispatch] = useReducer(todoReducer, [], init);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('todos', JSON.stringify(todos))\r\n    }, [todos]);\r\n\r\n    const handleDelete = useCallback((todoId) =>{\r\n\r\n        const action ={\r\n            type: 'delete',\r\n            payload: todoId\r\n        }\r\n        \r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const handleToggle = useCallback((todoId) =>{\r\n        dispatch({type: 'toggle', payload: todoId})\r\n    }, []);\r\n\r\n    const handleAddTodo= (newTodo) =>{\r\n\r\n        const action = {\r\n            type: 'add',\r\n            payload: newTodo\r\n        }\r\n\r\n        dispatch(action);\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>ToDoApp ({todos.length})</h1>\r\n            <hr/>\r\n            <div className='row'>\r\n                <div className='col-7'>\r\n                    <h4>ToDo's</h4>\r\n                    <hr/>\r\n                    <TodoList todos={todos} handleDelete={handleDelete} handleToggle={handleToggle}/>\r\n                </div>\r\n                <div className='col-5'>\r\n                    <TodoAdd handleAddTodo={handleAddTodo}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"," import React from 'react';\n import ReactDOM from 'react-dom';\nimport { TodoApp } from './components/08-useReducer/TodoApp';\n// //import { CallbackHook } from './components/06-memos/CallbackHook';\n// //import { MemoHook } from './components/06-memos/MemoHook';\n// //import { FormWithCustomHook } from './components/02-useEffect/FormWithCustomHook';\n// //import { MultipleCustomHooks } from './components/03-examples/MultipleCustomHooks';\n// //import { FocusScreen } from './components/04-useRef/FocusScreen';\n// //import { RealExampleRef } from './components/04-useRef/RealExampleRef';\n// //import { Layout } from './components/05-useLayoutEffect/LayoutEffect';\n// //import { Memorize } from './components/06-memos/Memorize';\n// //import { CounterApp } from './components/01-useState/CounterApp';\n// //import { CounterWithCustomHook } from './components/01-useState/CounterWithCustomHook';\n// import {Padre} from './components/07-tarea-memo/Padre'\n// //import { SimpleForm } from './components/02-useEffect/SimpleForm';\n// //import { HookApp } from './HookApp';\n ReactDOM.render(\n   <TodoApp/>,\n   document.getElementById('root')\n );\n\n\n\n"],"sourceRoot":""}